■deviseを設定
＞gem install devise
Gemfileに「gem 'devise'」を追記し、
・Generateを使ってどしどし生成
＞rails generate devise:install
＞rails generate devise blogger


class Blogger < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :token_authenticatable, :confirmable, :lockable and :timeoutable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :remember_me
end

・
＞config/routes.rb に以下を追加
devise_for :bloggers

・controllerクラスをいかに編集
class ApplicationController < ActionController::Base
  protect_from_forgery
  before_filter :authenticate_blogger!
end

>rails g scaffold entry title:string sentence:string public_flag:integer

>public以下のindex.htmlを削除し、config/rootes.rbを編集

>rake db:create
>rake db:migrate RAILS_ENV=development
>rake db:migrate RAILS_ENV=test

○カラム追加
>rails g migration add_column_for_bloggers
>rails g migration add_column_for_entries

○関連を追加したら、ブロガー毎の記事表示を行う
scopeを定義し、Arelを使った表示

  def index
    @blogger = current_blogger
    @entries = Entry.where("blogger_id=?",@blogger.id).latest

    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @entries }
    end
  end

○バリデーション
entryとbloggerテーブルにそれぞれ必須チェックを追加


○日本語化対応
・config/localesにja.ymlを追加
・続いてconfig/application.rbを修正
# config.i18n.default_locale = :de のところを
config.i18n.default_locale = :ja

とする。


○レイアウトを少し整える
renderを使い、メニューを追加。
　common/header
  common/footer
  common/menu
cssを追加。

○HTML5対応。

○コメント
モデルを生成
＞rails g model comment entry:references title:string sentence:string name:string

entryモデルに以下を追加

has_many :comments

Controllerを生成
＞rails g controller comments
route.rbを編集
　→commentはentryの下ににくるようにする。

  resources :entries do
    resources :comments, :only =>[:new, :create]
  end

viewの編集
view/comments/_comment.html.erb
<%= form_for [comment.entry, comment] do |f| %>
  <div class="field">
    <%= f.label :author ,'コメント投稿者名' %><br />
    <%= f.text_field :author %>
  </div>
  <div class="field">
    <%= f.label :sentence ,'本文'%><br />
    <%= f.text_area :sentence %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>

○ブログデザインカスタマイズ
　ブログページの完全分離
  ＞rails g controller blog index
views/bolg/index.html.erb

<table>
        <tr >
          <th >ブログ</th>
        </tr>
  <% @entries.each do |entry| %>
      <tr >
        <td >
        <div class="blog_entry">
        タイトル：<%= entry.title %><br>
        <%= format_string_length(entry.sentence,20) %><br>
        投稿日：<%= entry.created_at.strftime("%Y/%m/%d") %>
        </div>
        </td>
      </tr>
    <% end %>
</table>

・コメントを表示及び、欄を移動。
・レイアウト調整スキンIDごとのHeader画像、CSSを作成
　Layoutファイルの修正

<!DOCTYPE html>
<html>
<head>
  <title>GameBlog</title>
  <%= stylesheet_link_tag  "blog/#{@skin_id}" ,:media=>'screen' %>
  <%= javascript_include_tag :defaults %>
  <%= csrf_meta_tag %>
</head>
<body>
<%= render 'blog/header' %>
<section>
<%= yield %>
</section>
<nav>
<%=render 'blog/side_info' %>
</nav>
</body>
</html>



・URL設定を変更
　route.rbを編集

・設定テーブルの追加
blog_settingテーブルをbloggerテーブルと1対1で作る
rails g model blog_setting blogger_id:integer skin_id:integer

またblogテーブルに

・スキン情報を幾つか登録
　スキン選択画面の作成。
　
○ポイント毎の機能追加
・Rspecによるテストを追加

Gemfileに以下を追加
group :test do
  gem 'rspec'
  gem 'rspec-rails',:group=>:development
end
　
bundle install

rails g rspec:install

https://luna.easyjp.net/projects/memo/wiki/rails/Rails3%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB/RSpec%E3%81%AE%E6%BA%96%E5%82%99%E3%82%92%E3%81%99%E3%82%8B

○ポイント決済

○プロフィール機能
・bloggerコントローラの生成
＞rails g controller blogger show edit update

＞views/layout/entries.html.erb
  <table>
    <tr><td class="side_menu">
    <%= link_to 'プロフィール情報',  :controller =>'blogger', :action => 'edit',:id=>@blogger.id %>
    </td><td class="content">
<%= yield %>
    </td></tr>
  </table>

＞views/common/_blogger_info.html.erb
を作成。view/layouts/entries.html.erbを編集

○Memcached連携について

・Memcachedの設定
http://allegiance.chi-town.com/MemCacheDManager.aspx

これでローカルにMemcachedサーバを立てる



○関連ユーザについて

○モバイル画面


※参考
http://d.hatena.ne.jp/babie/20100729/1280381392
https://github.com/plataformatec/devise

http://mitukiii.jp/2011/01/16/rails3-create-twitter-mashup-application/
